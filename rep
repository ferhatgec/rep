#!/usr/bin/env python3

# MIT License
# 
# Copyright (c) 2021 Ferhat Ge√ßdoƒüan All Rights Reserved.
# Distributed under the terms of the MIT License.
#

from bs4 import BeautifulSoup
import sys, requests, re

# From github.com/ferhatgec/pycolorized
def RED_COLOR(): 
	print("\033[0;31m", end='')
	
def GREEN_COLOR(): 
	print("\033[0;32m", end='')

def YELLOW_COLOR():
	print("\033[0;33m", end='')

def BLUE_COLOR():
	print("\033[0;34m", end='')

def MAGENTA_COLOR():
	print("\033[0;35m", end='')
	
def CYAN_COLOR():
	print("\033[0;36m", end='')

def LIGHT_BLACK_COLOR():
	print("\033[0;90m", end='')
	
def LIGHT_RED_COLOR():
	print("\033[0;91m", end='')

def LIGHT_GREEN_COLOR():
	print("\033[0;92m", end='')

def LIGHT_YELLOW_COLOR():
	print("\033[0;93m", end='')

def LIGHT_BLUE_COLOR():
	print("\033[0;94m", end='')

def LIGHT_MAGENTA_COLOR():
	print("\033[0;95m", end='')

def LIGHT_CYAN_COLOR():
	print("\033[0;96m", end='')

def LIGHT_WHITE_COLOR():
	print("\033[0;97m", end='')

# Default bold** color definitions
def BOLD_RED_COLOR():
	print("\033[1;31m", end='')

def BOLD_GREEN_COLOR():
	print("\033[1;32m", end='')

def BOLD_YELLOW_COLOR():
	print("\033[01;33m", end='')

def BOLD_BLUE_COLOR():
	print("\033[1;34m", end='')

def BOLD_MAGENTA_COLOR():
	print("\033[1;35m", end='')
	
def BOLD_CYAN_COLOR(): 
	print("\033[1;36m", end='')
def BOLD_LIGHT_BLACK_COLOR():
	print("\033[1;90m", end='')
	
def BOLD_LIGHT_RED_COLOR(): 
	print("\033[1;91m", end='')

def BOLD_LIGHT_GREEN_COLOR(): 
	print("\033[1;92m", end='')

def BOLD_LIGHT_YELLOW_COLOR():
	print("\033[1;93m", end='')

def BOLD_LIGHT_BLUE_COLOR():
	print("\033[1;94m", end='')

def BOLD_LIGHT_MAGENTA_COLOR():
	print("\033[1;95m", end='')

def BOLD_LIGHT_CYAN_COLOR():
	print("\033[1;96m", end='')

def BOLD_LIGHT_WHITE_COLOR():
	print("\033[1;97m", end='')

# Reset (BLACK)
def BLACK_COLOR():
	print("\033[0m", end='')

def WHITE_COLOR():
	print("\033[1;37m", end='')


github="https://www.github.com/"

character='*'

watch_emoji = 'üëÅÔ∏è'
star_emoji  = '‚≠ê'
fork_emoji  = '‚éá'
commit_emoji= '‚ü≥'

# Update user-agent
headers = requests.utils.default_headers()
headers.update({
    'User-Agent': 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:84.0) Gecko/20100101 Firefox/83.0',
})

def append(keyword: str):
    return github + keyword

# CLI linguist-like bar generator
def header(language_1, language_2, language_1_str, language_2_str):
    l1 = int(language_1 / 2)
    l2 = 0
    
    if language_2 < 2 and language_2_str != None:
        l2 = 2
    else:
        l2 = int(language_2 / 2)
        
    for i in range(l1):
        BOLD_LIGHT_RED_COLOR()
        print('*', end='')

    if language_2_str != None:
        for i in range(l2):
            BOLD_LIGHT_GREEN_COLOR()
            print('*', end='')

    BOLD_YELLOW_COLOR()
    print(' (' + language_1_str + ' ' + language_2_str + ')', end='')
    BOLD_LIGHT_WHITE_COLOR()
    
# Remove all newlines
def removenl(string: str):
    return string.replace('\n', '')

def removess(string: str):
    string = string.replace(' ', '')
    return removenl(string)

# Main
def content(keyword: str):
    html_content = requests.get(keyword, headers=headers).text
    parse = BeautifulSoup(html_content, "lxml")
    
    # Get author name of repository
    author = parse.find('span', class_='author flex-self-stretch').text
    
    repository = parse.find('a', attrs={'data-pjax' : '#js-repo-pjax-container'}).text
    
    info      = parse.find_all('a', class_='social-count')
    watch     = info[0].text
    star      = info[1].text
    fork      = info[2].text
    
    # Last commit panel 
    last_commit_data = parse.find('div', class_='js-details-container Details d-flex rounded-top-1 flex-items-center flex-wrap')
    
    last_commit_message = last_commit_data.find('span', class_='d-none d-sm-inline')
    
    last_commit_message = last_commit_message.find('a', class_='link-gray-dark')
    
    last_commit_user = parse.find_all('a', attrs={'class' : 'commit-author user-mention'})
    
    commit_hash = last_commit_data.find('a', class_='f6 link-gray text-mono ml-2 d-none d-lg-inline')
    last_commit = last_commit_data.find('a', class_='link-gray ml-2')
    
    commits     = parse.find('a', class_='pl-3 pr-3 py-3 p-md-0 mt-n3 mb-n3 mr-n3 m-md-0 link-gray-dark no-underline no-wrap')
    
    commits     = removess(commits.find('span', class_='d-none d-sm-inline').text)
    
    panel = parse.find('div', class_='flex-shrink-0 col-12 col-md-3')
    
    # TODO: Check if is provided. 
    description = (panel.find('p', class_='f4 mt-3').text).strip()
    
    if description == None:
        description = 'No description provided.' 
    
    license = (parse.find('a', class_='muted-link').text).strip()
    
    source_panel = parse.find('div', class_='Details-content--hidden-not-important js-navigation-container js-active-navigation-container d-md-block')
    
    source  = source_panel.find_all('a', class_='js-navigation-open link-gray-dark')
    source_desc = parse.find_all('span', attrs={'css-truncate css-truncate-target d-block width-fit'})        

    linguist = parse.find_all('a', class_='d-inline-flex flex-items-center flex-nowrap link-gray no-underline text-small mr-3')  
    
    BOLD_LIGHT_CYAN_COLOR()
    print(removess(author), end='')
    
    LIGHT_BLACK_COLOR()
    print('/', end='')
    

    BOLD_LIGHT_WHITE_COLOR()
    print(repository, end='')
    
    print(' ' + watch_emoji + ' ', removess(watch), end='')
    print(' ' + star_emoji  + ' ' + removess(star), end='')
    print(' ' + fork_emoji  + '  ' + removess(fork), end='')
    print(' ' + commit_emoji+ ' ' + commits, end='\n')
    
    header(int(re.search(r'\d+', linguist[0].text).group()), int(re.search(r'\d+', linguist[1].text).group()), removess(linguist[0].text), removess(linguist[1].text))
    
    print('\n' + description + ' [' + license + ']')
    
    if last_commit_message == None:
        print('Ah, crashed!')
        sys.exit(0)
        
    BOLD_LIGHT_YELLOW_COLOR()

    print('-\n' + removess(last_commit_user[0].text), end='')
    
    BOLD_LIGHT_BLACK_COLOR()
    print(' : ' + removenl(last_commit_message.text), end=' ')
    
    BOLD_LIGHT_WHITE_COLOR()
    print('(', end='')
    
    BOLD_LIGHT_RED_COLOR()
    print(removess(commit_hash.text), end='') 
    
    BOLD_LIGHT_WHITE_COLOR()
    print(') ', end='')
    
    print(removenl(last_commit.text), end='\n')
    
    print('-')
    
    
    # Directories, files.
    for i in range(len(source)):
        BOLD_CYAN_COLOR()
        print(source[i].text, end='')
        
        BOLD_LIGHT_WHITE_COLOR()
        print(' : ', removenl(source_desc[i].text))
    

content(append(sys.argv[1]))
